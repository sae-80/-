#define SECRET_SSID "elecom-4e9220"
#define SECRET_PASS "45t625y68f89"

#include <WiFiS3.h>

#include <Wire.h>
#define ADR 0x38

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;    // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;                 // your network key index number (needed only for WEP)

int led =  LED_BUILTIN;
int status = WL_IDLE_STATUS;
WiFiServer server(80);

void setup() 
{
  Wire.begin();
  Serial.begin(115200);
  pinMode(led, OUTPUT);      // set the LED pin mode

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  // attempt to connect to WiFi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to Network named: ");
    Serial.println(ssid);                   // print the network name (SSID);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    // wait 10 seconds for connection:
    delay(10000);
  }
  server.begin();                           // start the web server on port 80
  
  printWifiStatus();                        // you're connected now, so print out the status
}


void loop() 
{

  WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) 
    {            // loop while the client's connected
      if (client.available()) 
      {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out to the serial monitor
        if (c == '\n') 
        {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) 
          {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("<p style='font-size:10vw;'>お部屋管理ページ</p>");
            client.print("<p style=\"font-size:7vw;\">温度と湿度が知りたい！<br><a href=\"/H\">ここ押して！</a></p>");
            client.print("<p style=\"font-size:7vw;\">扇子を仰いで！<br><a href=\"/H\">ここ押して！</a></p>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } 
          else 
          {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } 
        else if (c != '\r') 
        {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) 
        {
          tempHumidity();
        }
      }
      
    }
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}


void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  // print where to go in a browser:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}


void tempHumidity()
{
  WiFiClient client = server.available();   // listen for incoming clients
  String currentLine = "";                // make a String to hold incoming data from the client

  float hu, tp;
  uint8_t buf[8];
  long a;
  int flg;

  delay(500);
  flg = 1;
  while (flg)
  {
    Wire.beginTransmission(ADR);
    Wire.write(0xac);
    Wire.write(0x33);
    Wire.write(0x00);
    Wire.endTransmission();
    delay(100);

    Wire.requestFrom(ADR, 6);
    for (uint8_t i = 0; i < 6; i++)  buf[i] = Wire.read();

    if (buf[0] & 0x80) Serial.println("Measurement not Comp");
    else flg = 0;
  }
  a = buf[1];
  a <<= 8;
  a |= buf[2];
  a <<= 4;
  a |= ((buf[3] >> 4) & 0x0f);
  hu = a / 10485.76;

  a = (buf[3] & 0xf);
  a <<= 8;
  a |= buf[4];
  a <<= 8;
  a |= buf[5];
  tp = a / 5242.88 - 50;

  

  while (client.connected()) 
  {            // loop while the client's connected
    if (client.available()) 
    {             // if there's bytes to read from the client,
      char c = client.read();             // read a byte, then
      Serial.write(c);                    // print it out to the serial monitor
      if (c == '\n') 
      {                    // if the byte is a newline character
        // if the current line is blank, you got two newline characters in a row.
        // that's the end of the client HTTP request, so send a response:
        if (currentLine.length() == 0) 
        {
          // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
          // and a content-type so the client knows what's coming, then a blank line:
          client.println("HTTP/1.1 200 OK");
          client.println("Content-type:text/html");
          client.println();

          // the content of the HTTP response follows the header:
          client.print("<p style='font-size:10vw;'>お部屋管理ページ</p>");
          client.print("<p style='font-size:7vw;'>T= " + String(tp) + "'C</p>");
          client.print("<p style=\"font-size:7vw;\">H= " + String(hu) + "% </p>");
          client.print("<p style=\"font-size:7vw;\">扇子を仰いで！<br><a href=\"/H\">ここ押して！</a></p>");


          if (tp >= 28)
          {
            client.print("<p style='font-size:7vw;'>室温が高いので、エアコンなどをつけましょう。</p>");
            client.print("<p style=\"font-size:7vw;\">扇子を仰いでほしい？<br><a href=\"/H\">ここ押して！</a></p>");
          }
          if (tp <= 20)
          {
            client.print("<p style='font-size:7vw;'>室温が低いので、暖房などをつけましょう。</p>");
          }

          if (hu >= 75)
          {
            client.print("<p style='font-size:7vw;'>湿度が高いので、除湿しましょう。</p>");
          }

          // The HTTP response ends with another blank line:
          client.println();
          // break out of the while loop:
          break;
        } 
        else 
        {    // if you got a newline, then clear currentLine:
          currentLine = "";
        }
      } 
      else if (c != '\r') 
      {  // if you got anything else but a carriage return character,
        currentLine += c;      // add it to the end of the currentLine
      }
  }

}
